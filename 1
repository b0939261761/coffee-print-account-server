
> coffee-print-server@1.0.0 db:migrate /home/user/ProjectWeb/coffee-print-account-server
> npx sequelize db:migrate


[4mSequelize CLI [Node: 10.16.0, CLI: 5.5.1, ORM: 5.19.1][24m

Loaded configuration file "config/config.js".
Using environment "development".
Executing (default): SELECT 1+1 AS result { plain: true,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'SELECT' }
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys'; { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'SHOWTABLES' }
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'SequelizeMeta' AND c.table_schema = 'public' { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'DESCRIBE' }
Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  uniqueKeys:
   { SequelizeMeta_name_unique:
      { fields: [Array],
        msg: null,
        name: 'SequelizeMeta_name_unique',
        column: 'name',
        customIndex: false } },
  type: 'RAW' }
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  type: 'SHOWINDEXES' }
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC; { plain: false,
  raw: false,
  logging: [Function: bound consoleCall],
  order: [ [ 'name', [Literal] ] ],
  hooks: true,
  rejectOnEmpty: false,
  originalAttributes: [ 'name' ],
  attributes: [ 'name' ],
  tableNames: [ 'SequelizeMeta' ],
  type: 'SELECT',
  model: SequelizeMeta }
Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  uniqueKeys:
   { SequelizeMeta_name_unique:
      { fields: [Array],
        msg: null,
        name: 'SequelizeMeta_name_unique',
        column: 'name',
        customIndex: false } },
  type: 'RAW' }
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  type: 'SHOWINDEXES' }
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC; { plain: false,
  raw: false,
  logging: [Function: bound consoleCall],
  order: [ [ 'name', [Literal] ] ],
  hooks: true,
  rejectOnEmpty: false,
  originalAttributes: [ 'name' ],
  attributes: [ 'name' ],
  tableNames: [ 'SequelizeMeta' ],
  type: 'SELECT',
  model: SequelizeMeta }
Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  uniqueKeys:
   { SequelizeMeta_name_unique:
      { fields: [Array],
        msg: null,
        name: 'SequelizeMeta_name_unique',
        column: 'name',
        customIndex: false } },
  type: 'RAW' }
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  type: 'SHOWINDEXES' }
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC; { plain: false,
  raw: false,
  logging: [Function: bound consoleCall],
  order: [ [ 'name', [Literal] ] ],
  hooks: true,
  rejectOnEmpty: false,
  originalAttributes: [ 'name' ],
  attributes: [ 'name' ],
  tableNames: [ 'SequelizeMeta' ],
  type: 'SELECT',
  model: SequelizeMeta }
== 20190704000000-create-cartridge: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Cartridges" ("id"   SERIAL , "userId" INTEGER REFERENCES "Users" ("id") ON DELETE CASCADE, "code" VARCHAR(9) NOT NULL DEFAULT '' UNIQUE, "quantityResource" INTEGER NOT NULL DEFAULT 0, "active" BOOLEAN NOT NULL DEFAULT false, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY ("id")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'RAW' }
Executing (default): CREATE TRIGGER "Cartridges_update_at"
        BEFORE UPDATE ON "Cartridges"
          FOR EACH ROW EXECUTE PROCEDURE update_at_timestamp() { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'RAW' }
Executing (default): CREATE OR REPLACE FUNCTION "Cartridges_insert"() RETURNS trigger AS $$
        BEGIN
          IF NEW.code = '' OR NEW.code IS NULL THEN
            NEW.code := (WITH RECURSIVE serialNumber AS (
                SELECT
                  LPAD((RANDOM() * 1e9)::bigint::character(9), 9, '0') AS code,
                  0 AS nested
                UNION ALL
                SELECT
                  LPAD((RANDOM() * 1e9)::bigint::character(9), 9, '0') AS code,
                  nested + 1 AS nested
                FROM serialNumber WHERE nested < 1e6
              )
              SELECT code FROM serialNumber
                WHERE NOT EXISTS (
                  SELECT FROM "Cartridges" WHERE code = serialNumber.code
                )
                LIMIT 1
            );
          END IF;

          RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;

      CREATE TRIGGER "Cartridges_insert"
          BEFORE INSERT ON "Cartridges"
            FOR EACH ROW
            EXECUTE PROCEDURE "Cartridges_insert"(); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'RAW' }
Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  uniqueKeys:
   { SequelizeMeta_name_unique:
      { fields: [Array],
        msg: null,
        name: 'SequelizeMeta_name_unique',
        column: 'name',
        customIndex: false } },
  type: 'RAW' }
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  type: 'SHOWINDEXES' }
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING *; { plain: false,
  raw: false,
  logging: [Function: bound consoleCall],
  hooks: true,
  validate: true,
  fields: [ 'name' ],
  defaultFields: [ 'name' ],
  returning: true,
  hasTrigger: undefined,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  clientMinMessages: 'warning',
  standardConformingStrings: true,
  omitNull: false,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: '11.5.0',
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  username: 'postgres',
  password: '6k3vddrb2v',
  database: 'coffee-print-account',
  port: '5432',
  type: 'INSERT',
  instance:
   SequelizeMeta {
     dataValues: { name: '20190704000000-create-cartridge.js' },
     _previousDataValues: { name: undefined },
     _changed: { name: true },
     _modelOptions:
      { timestamps: false,
        validate: {},
        freezeTableName: false,
        underscored: false,
        paranoid: false,
        rejectOnEmpty: false,
        whereCollection: null,
        schema: null,
        schemaDelimiter: '',
        defaultScope: {},
        scopes: {},
        indexes: [],
        name: [Object],
        omitNull: false,
        tableName: 'SequelizeMeta',
        charset: 'utf8',
        collate: 'utf8_unicode_ci',
        sequelize: [Sequelize],
        hooks: {} },
     _options:
      { isNewRecord: true,
        _schema: null,
        _schemaDelimiter: '',
        attributes: undefined,
        include: undefined,
        raw: undefined,
        silent: undefined },
     isNewRecord: true },
  model: SequelizeMeta,
  bind: [ '20190704000000-create-cartridge.js' ] }
== 20190704000000-create-cartridge: migrated (0.193s)

Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  uniqueKeys:
   { SequelizeMeta_name_unique:
      { fields: [Array],
        msg: null,
        name: 'SequelizeMeta_name_unique',
        column: 'name',
        customIndex: false } },
  type: 'RAW' }
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  type: 'SHOWINDEXES' }
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC; { plain: false,
  raw: false,
  logging: [Function: bound consoleCall],
  order: [ [ 'name', [Literal] ] ],
  hooks: true,
  rejectOnEmpty: false,
  originalAttributes: [ 'name' ],
  attributes: [ 'name' ],
  tableNames: [ 'SequelizeMeta' ],
  type: 'SELECT',
  model: SequelizeMeta }
== 20190705000000-create-device: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Devices" ("id"   SERIAL , "userId" INTEGER REFERENCES "Users" ("id") ON DELETE CASCADE, "code" VARCHAR(5) NOT NULL DEFAULT '' UNIQUE, "city" VARCHAR(50) NOT NULL DEFAULT '', "description" VARCHAR(255) NOT NULL DEFAULT '', "appVersionCode" INTEGER NOT NULL DEFAULT 0, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY ("id")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'RAW' }
Executing (default): CREATE TRIGGER "Devices_update_at"
        BEFORE UPDATE ON "Devices"
          FOR EACH ROW EXECUTE PROCEDURE update_at_timestamp() { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'RAW' }
Executing (default): INSERT INTO "Devices" (code, description)
        VALUES ('10001', 'Устройство: 1'),('10002', 'Устройство: 2'),('10003', 'Устройство: 3'),('10004', 'Устройство: 4'),('10005', 'Устройство: 5'),('10006', 'Устройство: 6'),('10007', 'Устройство: 7'),('10008', 'Устройство: 8'),('10009', 'Устройство: 9'),('10010', 'Устройство: 10'),('10011', 'Устройство: 11'),('10012', 'Устройство: 12'),('10013', 'Устройство: 13'),('10014', 'Устройство: 14'),('10015', 'Устройство: 15'),('10016', 'Устройство: 16'),('10017', 'Устройство: 17'),('10018', 'Устройство: 18'),('10019', 'Устройство: 19'),('10020', 'Устройство: 20'),('10021', 'Устройство: 21'),('10022', 'Устройство: 22'),('10023', 'Устройство: 23'),('10024', 'Устройство: 24'),('10025', 'Устройство: 25'),('10026', 'Устройство: 26'),('10027', 'Устройство: 27'),('10028', 'Устройство: 28'),('10029', 'Устройство: 29'),('10030', 'Устройство: 30'),('10031', 'Устройство: 31'),('10032', 'Устройство: 32'),('10033', 'Устройство: 33'),('10034', 'Устройство: 34'),('10035', 'Устройство: 35'),('10036', 'Устройство: 36'),('10037', 'Устройство: 37'),('10038', 'Устройство: 38'),('10039', 'Устройство: 39'),('10040', 'Устройство: 40'),('10041', 'Устройство: 41'),('10042', 'Устройство: 42'),('10043', 'Устройство: 43'),('10044', 'Устройство: 44'),('10045', 'Устройство: 45'),('10046', 'Устройство: 46'),('10047', 'Устройство: 47'),('10048', 'Устройство: 48'),('10049', 'Устройство: 49'),('10050', 'Устройство: 50'),('10051', 'Устройство: 51'),('10052', 'Устройство: 52'),('10053', 'Устройство: 53'),('10054', 'Устройство: 54'),('10055', 'Устройство: 55'),('10056', 'Устройство: 56'),('10057', 'Устройство: 57'),('10058', 'Устройство: 58'),('10059', 'Устройство: 59'),('10060', 'Устройство: 60'),('10061', 'Устройство: 61'),('10062', 'Устройство: 62'),('10063', 'Устройство: 63'),('10064', 'Устройство: 64'),('10065', 'Устройство: 65'),('10066', 'Устройство: 66'),('10067', 'Устройство: 67'),('10068', 'Устройство: 68'),('10069', 'Устройство: 69'),('10070', 'Устройство: 70'),('10071', 'Устройство: 71'),('10072', 'Устройство: 72'),('10073', 'Устройство: 73'),('10074', 'Устройство: 74'),('10075', 'Устройство: 75'),('10076', 'Устройство: 76'),('10077', 'Устройство: 77'),('10078', 'Устройство: 78'),('10079', 'Устройство: 79'),('10080', 'Устройство: 80'),('10081', 'Устройство: 81'),('10082', 'Устройство: 82'),('10083', 'Устройство: 83'),('10084', 'Устройство: 84'),('10085', 'Устройство: 85'),('10086', 'Устройство: 86'),('10087', 'Устройство: 87'),('10088', 'Устройство: 88'),('10089', 'Устройство: 89'),('10090', 'Устройство: 90'),('10091', 'Устройство: 91'),('10092', 'Устройство: 92'),('10093', 'Устройство: 93'),('10094', 'Устройство: 94'),('10095', 'Устройство: 95'),('10096', 'Устройство: 96'),('10097', 'Устройство: 97'),('10098', 'Устройство: 98'),('10099', 'Устройство: 99'),('10100', 'Устройство: 100'),('10101', 'Устройство: 101'),('10102', 'Устройство: 102'),('10103', 'Устройство: 103'),('10104', 'Устройство: 104'),('10105', 'Устройство: 105'),('10106', 'Устройство: 106'),('10107', 'Устройство: 107'),('10108', 'Устройство: 108'),('10109', 'Устройство: 109'),('10110', 'Устройство: 110'),('10111', 'Устройство: 111'),('10112', 'Устройство: 112'),('10113', 'Устройство: 113'),('10114', 'Устройство: 114'),('10115', 'Устройство: 115'),('10116', 'Устройство: 116'),('10117', 'Устройство: 117'),('10118', 'Устройство: 118'),('10119', 'Устройство: 119'),('10120', 'Устройство: 120'),('10121', 'Устройство: 121'),('10122', 'Устройство: 122'),('10123', 'Устройство: 123'),('10124', 'Устройство: 124'),('10125', 'Устройство: 125'),('10126', 'Устройство: 126'),('10127', 'Устройство: 127'),('10128', 'Устройство: 128'),('10129', 'Устройство: 129'),('10130', 'Устройство: 130'),('10131', 'Устройство: 131'),('10132', 'Устройство: 132'),('10133', 'Устройство: 133'),('10134', 'Устройство: 134'),('10135', 'Устройство: 135'),('10136', 'Устройство: 136'),('10137', 'Устройство: 137'),('10138', 'Устройство: 138'),('10139', 'Устройство: 139'),('10140', 'Устройство: 140'),('10141', 'Устройство: 141'),('10142', 'Устройство: 142'),('10143', 'Устройство: 143'),('10144', 'Устройство: 144'),('10145', 'Устройство: 145'),('10146', 'Устройство: 146'),('10147', 'Устройство: 147'),('10148', 'Устройство: 148'),('10149', 'Устройство: 149'),('10150', 'Устройство: 150'),('10151', 'Устройство: 151'),('10152', 'Устройство: 152'),('10153', 'Устройство: 153'),('10154', 'Устройство: 154'),('10155', 'Устройство: 155'),('10156', 'Устройство: 156'),('10157', 'Устройство: 157'),('10158', 'Устройство: 158'),('10159', 'Устройство: 159'),('10160', 'Устройство: 160'),('10161', 'Устройство: 161'),('10162', 'Устройство: 162'),('10163', 'Устройство: 163'),('10164', 'Устройство: 164'),('10165', 'Устройство: 165'),('10166', 'Устройство: 166'),('10167', 'Устройство: 167'),('10168', 'Устройство: 168'),('10169', 'Устройство: 169'),('10170', 'Устройство: 170'),('10171', 'Устройство: 171'),('10172', 'Устройство: 172'),('10173', 'Устройство: 173'),('10174', 'Устройство: 174'),('10175', 'Устройство: 175'),('10176', 'Устройство: 176'),('10177', 'Устройство: 177'),('10178', 'Устройство: 178'),('10179', 'Устройство: 179'),('10180', 'Устройство: 180'),('10181', 'Устройство: 181'),('10182', 'Устройство: 182'),('10183', 'Устройство: 183'),('10184', 'Устройство: 184'),('10185', 'Устройство: 185'),('10186', 'Устройство: 186'),('10187', 'Устройство: 187'),('10188', 'Устройство: 188'),('10189', 'Устройство: 189'),('10190', 'Устройство: 190'),('10191', 'Устройство: 191'),('10192', 'Устройство: 192'),('10193', 'Устройство: 193'),('10194', 'Устройство: 194'),('10195', 'Устройство: 195'),('10196', 'Устройство: 196'),('10197', 'Устройство: 197'),('10198', 'Устройство: 198'),('10199', 'Устройство: 199'),('10200', 'Устройство: 200'),('10201', 'Устройство: 201'),('10202', 'Устройство: 202'),('10203', 'Устройство: 203'),('10204', 'Устройство: 204'),('10205', 'Устройство: 205'),('10206', 'Устройство: 206'),('10207', 'Устройство: 207'),('10208', 'Устройство: 208'),('10209', 'Устройство: 209'),('10210', 'Устройство: 210'),('10211', 'Устройство: 211'),('10212', 'Устройство: 212'),('10213', 'Устройство: 213'),('10214', 'Устройство: 214'),('10215', 'Устройство: 215'),('10216', 'Устройство: 216'),('10217', 'Устройство: 217'),('10218', 'Устройство: 218'),('10219', 'Устройство: 219'),('10220', 'Устройство: 220'),('10221', 'Устройство: 221'),('10222', 'Устройство: 222'),('10223', 'Устройство: 223'),('10224', 'Устройство: 224'),('10225', 'Устройство: 225'),('10226', 'Устройство: 226'),('10227', 'Устройство: 227'),('10228', 'Устройство: 228'),('10229', 'Устройство: 229'),('10230', 'Устройство: 230'),('10231', 'Устройство: 231'),('10232', 'Устройство: 232'),('10233', 'Устройство: 233'),('10234', 'Устройство: 234'),('10235', 'Устройство: 235'),('10236', 'Устройство: 236'),('10237', 'Устройство: 237'),('10238', 'Устройство: 238'),('10239', 'Устройство: 239'),('10240', 'Устройство: 240'),('10241', 'Устройство: 241'),('10242', 'Устройство: 242'),('10243', 'Устройство: 243'),('10244', 'Устройство: 244'),('10245', 'Устройство: 245'),('10246', 'Устройство: 246'),('10247', 'Устройство: 247'),('10248', 'Устройство: 248'),('10249', 'Устройство: 249'),('10250', 'Устройство: 250'),('10251', 'Устройство: 251'),('10252', 'Устройство: 252'),('10253', 'Устройство: 253'),('10254', 'Устройство: 254'),('10255', 'Устройство: 255'),('10256', 'Устройство: 256'),('10257', 'Устройство: 257'),('10258', 'Устройство: 258'),('10259', 'Устройство: 259'),('10260', 'Устройство: 260'),('10261', 'Устройство: 261'),('10262', 'Устройство: 262'),('10263', 'Устройство: 263'),('10264', 'Устройство: 264'),('10265', 'Устройство: 265'),('10266', 'Устройство: 266'),('10267', 'Устройство: 267'),('10268', 'Устройство: 268'),('10269', 'Устройство: 269'),('10270', 'Устройство: 270'),('10271', 'Устройство: 271'),('10272', 'Устройство: 272'),('10273', 'Устройство: 273'),('10274', 'Устройство: 274'),('10275', 'Устройство: 275'),('10276', 'Устройство: 276'),('10277', 'Устройство: 277'),('10278', 'Устройство: 278'),('10279', 'Устройство: 279'),('10280', 'Устройство: 280'),('10281', 'Устройство: 281'),('10282', 'Устройство: 282'),('10283', 'Устройство: 283'),('10284', 'Устройство: 284'),('10285', 'Устройство: 285'),('10286', 'Устройство: 286'),('10287', 'Устройство: 287'),('10288', 'Устройство: 288'),('10289', 'Устройство: 289'),('10290', 'Устройство: 290'),('10291', 'Устройство: 291'),('10292', 'Устройство: 292'),('10293', 'Устройство: 293'),('10294', 'Устройство: 294'),('10295', 'Устройство: 295'),('10296', 'Устройство: 296'),('10297', 'Устройство: 297'),('10298', 'Устройство: 298'),('10299', 'Устройство: 299'),('10300', 'Устройство: 300'),('10301', 'Устройство: 301'),('10302', 'Устройство: 302'),('10303', 'Устройство: 303'),('10304', 'Устройство: 304'),('10305', 'Устройство: 305'),('10306', 'Устройство: 306'),('10307', 'Устройство: 307'),('10308', 'Устройство: 308'),('10309', 'Устройство: 309'),('10310', 'Устройство: 310'),('10311', 'Устройство: 311'),('10312', 'Устройство: 312'),('10313', 'Устройство: 313'),('10314', 'Устройство: 314'),('10315', 'Устройство: 315'),('10316', 'Устройство: 316'),('10317', 'Устройство: 317'),('10318', 'Устройство: 318'),('10319', 'Устройство: 319'),('10320', 'Устройство: 320'),('10321', 'Устройство: 321'),('10322', 'Устройство: 322'),('10323', 'Устройство: 323'),('10324', 'Устройство: 324'),('10325', 'Устройство: 325'),('10326', 'Устройство: 326'),('10327', 'Устройство: 327'),('10328', 'Устройство: 328'),('10329', 'Устройство: 329'),('10330', 'Устройство: 330'),('10331', 'Устройство: 331'),('10332', 'Устройство: 332'),('10333', 'Устройство: 333'),('10334', 'Устройство: 334'),('10335', 'Устройство: 335'),('10336', 'Устройство: 336'),('10337', 'Устройство: 337'),('10338', 'Устройство: 338'),('10339', 'Устройство: 339'),('10340', 'Устройство: 340'),('10341', 'Устройство: 341'),('10342', 'Устройство: 342'),('10343', 'Устройство: 343'),('10344', 'Устройство: 344'),('10345', 'Устройство: 345'),('10346', 'Устройство: 346'),('10347', 'Устройство: 347'),('10348', 'Устройство: 348'),('10349', 'Устройство: 349'),('10350', 'Устройство: 350'),('10351', 'Устройство: 351'),('10352', 'Устройство: 352'),('10353', 'Устройство: 353'),('10354', 'Устройство: 354'),('10355', 'Устройство: 355'),('10356', 'Устройство: 356'),('10357', 'Устройство: 357'),('10358', 'Устройство: 358'),('10359', 'Устройство: 359'),('10360', 'Устройство: 360'),('10361', 'Устройство: 361'),('10362', 'Устройство: 362'),('10363', 'Устройство: 363'),('10364', 'Устройство: 364'),('10365', 'Устройство: 365'),('10366', 'Устройство: 366'),('10367', 'Устройство: 367'),('10368', 'Устройство: 368'),('10369', 'Устройство: 369'),('10370', 'Устройство: 370'),('10371', 'Устройство: 371'),('10372', 'Устройство: 372'),('10373', 'Устройство: 373'),('10374', 'Устройство: 374'),('10375', 'Устройство: 375'),('10376', 'Устройство: 376'),('10377', 'Устройство: 377'),('10378', 'Устройство: 378'),('10379', 'Устройство: 379'),('10380', 'Устройство: 380'),('10381', 'Устройство: 381'),('10382', 'Устройство: 382'),('10383', 'Устройство: 383'),('10384', 'Устройство: 384'),('10385', 'Устройство: 385'),('10386', 'Устройство: 386'),('10387', 'Устройство: 387'),('10388', 'Устройство: 388'),('10389', 'Устройство: 389'),('10390', 'Устройство: 390'),('10391', 'Устройство: 391'),('10392', 'Устройство: 392'),('10393', 'Устройство: 393'),('10394', 'Устройство: 394'),('10395', 'Устройство: 395'),('10396', 'Устройство: 396'),('10397', 'Устройство: 397'),('10398', 'Устройство: 398'),('10399', 'Устройство: 399'),('10400', 'Устройство: 400'),('10401', 'Устройство: 401'),('10402', 'Устройство: 402'),('10403', 'Устройство: 403'),('10404', 'Устройство: 404'),('10405', 'Устройство: 405'),('10406', 'Устройство: 406'),('10407', 'Устройство: 407'),('10408', 'Устройство: 408'),('10409', 'Устройство: 409'),('10410', 'Устройство: 410'),('10411', 'Устройство: 411'),('10412', 'Устройство: 412'),('10413', 'Устройство: 413'),('10414', 'Устройство: 414'),('10415', 'Устройство: 415'),('10416', 'Устройство: 416'),('10417', 'Устройство: 417'),('10418', 'Устройство: 418'),('10419', 'Устройство: 419'),('10420', 'Устройство: 420'),('10421', 'Устройство: 421'),('10422', 'Устройство: 422'),('10423', 'Устройство: 423'),('10424', 'Устройство: 424'),('10425', 'Устройство: 425'),('10426', 'Устройство: 426'),('10427', 'Устройство: 427'),('10428', 'Устройство: 428'),('10429', 'Устройство: 429'),('10430', 'Устройство: 430'),('10431', 'Устройство: 431'),('10432', 'Устройство: 432'),('10433', 'Устройство: 433'),('10434', 'Устройство: 434'),('10435', 'Устройство: 435'),('10436', 'Устройство: 436'),('10437', 'Устройство: 437'),('10438', 'Устройство: 438'),('10439', 'Устройство: 439'),('10440', 'Устройство: 440'),('10441', 'Устройство: 441'),('10442', 'Устройство: 442'),('10443', 'Устройство: 443'),('10444', 'Устройство: 444'),('10445', 'Устройство: 445'),('10446', 'Устройство: 446'),('10447', 'Устройство: 447'),('10448', 'Устройство: 448'),('10449', 'Устройство: 449'),('10450', 'Устройство: 450'),('10451', 'Устройство: 451'),('10452', 'Устройство: 452'),('10453', 'Устройство: 453'),('10454', 'Устройство: 454'),('10455', 'Устройство: 455'),('10456', 'Устройство: 456'),('10457', 'Устройство: 457'),('10458', 'Устройство: 458'),('10459', 'Устройство: 459'),('10460', 'Устройство: 460'),('10461', 'Устройство: 461'),('10462', 'Устройство: 462'),('10463', 'Устройство: 463'),('10464', 'Устройство: 464'),('10465', 'Устройство: 465'),('10466', 'Устройство: 466'),('10467', 'Устройство: 467'),('10468', 'Устройство: 468'),('10469', 'Устройство: 469'),('10470', 'Устройство: 470'),('10471', 'Устройство: 471'),('10472', 'Устройство: 472'),('10473', 'Устройство: 473'),('10474', 'Устройство: 474'),('10475', 'Устройство: 475'),('10476', 'Устройство: 476'),('10477', 'Устройство: 477'),('10478', 'Устройство: 478'),('10479', 'Устройство: 479'),('10480', 'Устройство: 480'),('10481', 'Устройство: 481'),('10482', 'Устройство: 482'),('10483', 'Устройство: 483'),('10484', 'Устройство: 484'),('10485', 'Устройство: 485'),('10486', 'Устройство: 486'),('10487', 'Устройство: 487'),('10488', 'Устройство: 488'),('10489', 'Устройство: 489'),('10490', 'Устройство: 490'),('10491', 'Устройство: 491'),('10492', 'Устройство: 492'),('10493', 'Устройство: 493'),('10494', 'Устройство: 494'),('10495', 'Устройство: 495'),('10496', 'Устройство: 496'),('10497', 'Устройство: 497'),('10498', 'Устройство: 498'),('10499', 'Устройство: 499'),('10500', 'Устройство: 500'),('10501', 'Устройство: 501'),('10502', 'Устройство: 502'),('10503', 'Устройство: 503'),('10504', 'Устройство: 504'),('10505', 'Устройство: 505'),('10506', 'Устройство: 506'),('10507', 'Устройство: 507'),('10508', 'Устройство: 508'),('10509', 'Устройство: 509'),('10510', 'Устройство: 510'),('10511', 'Устройство: 511'),('10512', 'Устройство: 512'),('10513', 'Устройство: 513'),('10514', 'Устройство: 514'),('10515', 'Устройство: 515'),('10516', 'Устройство: 516'),('10517', 'Устройство: 517'),('10518', 'Устройство: 518'),('10519', 'Устройство: 519'),('10520', 'Устройство: 520'),('10521', 'Устройство: 521'),('10522', 'Устройство: 522'),('10523', 'Устройство: 523'),('10524', 'Устройство: 524'),('10525', 'Устройство: 525'),('10526', 'Устройство: 526'),('10527', 'Устройство: 527'),('10528', 'Устройство: 528'),('10529', 'Устройство: 529'),('10530', 'Устройство: 530'),('10531', 'Устройство: 531'),('10532', 'Устройство: 532'),('10533', 'Устройство: 533'),('10534', 'Устройство: 534'),('10535', 'Устройство: 535'),('10536', 'Устройство: 536'),('10537', 'Устройство: 537'),('10538', 'Устройство: 538'),('10539', 'Устройство: 539'),('10540', 'Устройство: 540'),('10541', 'Устройство: 541'),('10542', 'Устройство: 542'),('10543', 'Устройство: 543'),('10544', 'Устройство: 544'),('10545', 'Устройство: 545'),('10546', 'Устройство: 546'),('10547', 'Устройство: 547'),('10548', 'Устройство: 548'),('10549', 'Устройство: 549'),('10550', 'Устройство: 550'),('10551', 'Устройство: 551'),('10552', 'Устройство: 552'),('10553', 'Устройство: 553'),('10554', 'Устройство: 554'),('10555', 'Устройство: 555'),('10556', 'Устройство: 556'),('10557', 'Устройство: 557'),('10558', 'Устройство: 558'),('10559', 'Устройство: 559'),('10560', 'Устройство: 560'),('10561', 'Устройство: 561'),('10562', 'Устройство: 562'),('10563', 'Устройство: 563'),('10564', 'Устройство: 564'),('10565', 'Устройство: 565'),('10566', 'Устройство: 566'),('10567', 'Устройство: 567'),('10568', 'Устройство: 568'),('10569', 'Устройство: 569'),('10570', 'Устройство: 570'),('10571', 'Устройство: 571'),('10572', 'Устройство: 572'),('10573', 'Устройство: 573'),('10574', 'Устройство: 574'),('10575', 'Устройство: 575'),('10576', 'Устройство: 576'),('10577', 'Устройство: 577'),('10578', 'Устройство: 578'),('10579', 'Устройство: 579'),('10580', 'Устройство: 580'),('10581', 'Устройство: 581'),('10582', 'Устройство: 582'),('10583', 'Устройство: 583'),('10584', 'Устройство: 584'),('10585', 'Устройство: 585'),('10586', 'Устройство: 586'),('10587', 'Устройство: 587'),('10588', 'Устройство: 588'),('10589', 'Устройство: 589'),('10590', 'Устройство: 590'),('10591', 'Устройство: 591'),('10592', 'Устройство: 592'),('10593', 'Устройство: 593'),('10594', 'Устройство: 594'),('10595', 'Устройство: 595'),('10596', 'Устройство: 596'),('10597', 'Устройство: 597'),('10598', 'Устройство: 598'),('10599', 'Устройство: 599'),('10600', 'Устройство: 600'),('10601', 'Устройство: 601'),('10602', 'Устройство: 602'),('10603', 'Устройство: 603'),('10604', 'Устройство: 604'),('10605', 'Устройство: 605'),('10606', 'Устройство: 606'),('10607', 'Устройство: 607'),('10608', 'Устройство: 608'),('10609', 'Устройство: 609'),('10610', 'Устройство: 610'),('10611', 'Устройство: 611'),('10612', 'Устройство: 612'),('10613', 'Устройство: 613'),('10614', 'Устройство: 614'),('10615', 'Устройство: 615'),('10616', 'Устройство: 616'),('10617', 'Устройство: 617'),('10618', 'Устройство: 618'),('10619', 'Устройство: 619'),('10620', 'Устройство: 620'),('10621', 'Устройство: 621'),('10622', 'Устройство: 622'),('10623', 'Устройство: 623'),('10624', 'Устройство: 624'),('10625', 'Устройство: 625'),('10626', 'Устройство: 626'),('10627', 'Устройство: 627'),('10628', 'Устройство: 628'),('10629', 'Устройство: 629'),('10630', 'Устройство: 630'),('10631', 'Устройство: 631'),('10632', 'Устройство: 632'),('10633', 'Устройство: 633'),('10634', 'Устройство: 634'),('10635', 'Устройство: 635'),('10636', 'Устройство: 636'),('10637', 'Устройство: 637'),('10638', 'Устройство: 638'),('10639', 'Устройство: 639'),('10640', 'Устройство: 640'),('10641', 'Устройство: 641'),('10642', 'Устройство: 642'),('10643', 'Устройство: 643'),('10644', 'Устройство: 644'),('10645', 'Устройство: 645'),('10646', 'Устройство: 646'),('10647', 'Устройство: 647'),('10648', 'Устройство: 648'),('10649', 'Устройство: 649'),('10650', 'Устройство: 650'),('10651', 'Устройство: 651'),('10652', 'Устройство: 652'),('10653', 'Устройство: 653'),('10654', 'Устройство: 654'),('10655', 'Устройство: 655'),('10656', 'Устройство: 656'),('10657', 'Устройство: 657'),('10658', 'Устройство: 658'),('10659', 'Устройство: 659'),('10660', 'Устройство: 660'),('10661', 'Устройство: 661'),('10662', 'Устройство: 662'),('10663', 'Устройство: 663'),('10664', 'Устройство: 664'),('10665', 'Устройство: 665'),('10666', 'Устройство: 666'),('10667', 'Устройство: 667'),('10668', 'Устройство: 668'),('10669', 'Устройство: 669'),('10670', 'Устройство: 670'),('10671', 'Устройство: 671'),('10672', 'Устройство: 672'),('10673', 'Устройство: 673'),('10674', 'Устройство: 674'),('10675', 'Устройство: 675'),('10676', 'Устройство: 676'),('10677', 'Устройство: 677'),('10678', 'Устройство: 678'),('10679', 'Устройство: 679'),('10680', 'Устройство: 680'),('10681', 'Устройство: 681'),('10682', 'Устройство: 682'),('10683', 'Устройство: 683'),('10684', 'Устройство: 684'),('10685', 'Устройство: 685'),('10686', 'Устройство: 686'),('10687', 'Устройство: 687'),('10688', 'Устройство: 688'),('10689', 'Устройство: 689'),('10690', 'Устройство: 690'),('10691', 'Устройство: 691'),('10692', 'Устройство: 692'),('10693', 'Устройство: 693'),('10694', 'Устройство: 694'),('10695', 'Устройство: 695'),('10696', 'Устройство: 696'),('10697', 'Устройство: 697'),('10698', 'Устройство: 698'),('10699', 'Устройство: 699'),('10700', 'Устройство: 700'),('10701', 'Устройство: 701'),('10702', 'Устройство: 702'),('10703', 'Устройство: 703'),('10704', 'Устройство: 704'),('10705', 'Устройство: 705'),('10706', 'Устройство: 706'),('10707', 'Устройство: 707'),('10708', 'Устройство: 708'),('10709', 'Устройство: 709'),('10710', 'Устройство: 710'),('10711', 'Устройство: 711'),('10712', 'Устройство: 712'),('10713', 'Устройство: 713'),('10714', 'Устройство: 714'),('10715', 'Устройство: 715'),('10716', 'Устройство: 716'),('10717', 'Устройство: 717'),('10718', 'Устройство: 718'),('10719', 'Устройство: 719'),('10720', 'Устройство: 720'),('10721', 'Устройство: 721'),('10722', 'Устройство: 722'),('10723', 'Устройство: 723'),('10724', 'Устройство: 724'),('10725', 'Устройство: 725'),('10726', 'Устройство: 726'),('10727', 'Устройство: 727'),('10728', 'Устройство: 728'),('10729', 'Устройство: 729'),('10730', 'Устройство: 730'),('10731', 'Устройство: 731'),('10732', 'Устройство: 732'),('10733', 'Устройство: 733'),('10734', 'Устройство: 734'),('10735', 'Устройство: 735'),('10736', 'Устройство: 736'),('10737', 'Устройство: 737'),('10738', 'Устройство: 738'),('10739', 'Устройство: 739'),('10740', 'Устройство: 740'),('10741', 'Устройство: 741'),('10742', 'Устройство: 742'),('10743', 'Устройство: 743'),('10744', 'Устройство: 744'),('10745', 'Устройство: 745'),('10746', 'Устройство: 746'),('10747', 'Устройство: 747'),('10748', 'Устройство: 748'),('10749', 'Устройство: 749'),('10750', 'Устройство: 750'),('10751', 'Устройство: 751'),('10752', 'Устройство: 752'),('10753', 'Устройство: 753'),('10754', 'Устройство: 754'),('10755', 'Устройство: 755'),('10756', 'Устройство: 756'),('10757', 'Устройство: 757'),('10758', 'Устройство: 758'),('10759', 'Устройство: 759'),('10760', 'Устройство: 760'),('10761', 'Устройство: 761'),('10762', 'Устройство: 762'),('10763', 'Устройство: 763'),('10764', 'Устройство: 764'),('10765', 'Устройство: 765'),('10766', 'Устройство: 766'),('10767', 'Устройство: 767'),('10768', 'Устройство: 768'),('10769', 'Устройство: 769'),('10770', 'Устройство: 770'),('10771', 'Устройство: 771'),('10772', 'Устройство: 772'),('10773', 'Устройство: 773'),('10774', 'Устройство: 774'),('10775', 'Устройство: 775'),('10776', 'Устройство: 776'),('10777', 'Устройство: 777'),('10778', 'Устройство: 778'),('10779', 'Устройство: 779'),('10780', 'Устройство: 780'),('10781', 'Устройство: 781'),('10782', 'Устройство: 782'),('10783', 'Устройство: 783'),('10784', 'Устройство: 784'),('10785', 'Устройство: 785'),('10786', 'Устройство: 786'),('10787', 'Устройство: 787'),('10788', 'Устройство: 788'),('10789', 'Устройство: 789'),('10790', 'Устройство: 790'),('10791', 'Устройство: 791'),('10792', 'Устройство: 792'),('10793', 'Устройство: 793'),('10794', 'Устройство: 794'),('10795', 'Устройство: 795'),('10796', 'Устройство: 796'),('10797', 'Устройство: 797'),('10798', 'Устройство: 798'),('10799', 'Устройство: 799'),('10800', 'Устройство: 800'),('10801', 'Устройство: 801'),('10802', 'Устройство: 802'),('10803', 'Устройство: 803'),('10804', 'Устройство: 804'),('10805', 'Устройство: 805'),('10806', 'Устройство: 806'),('10807', 'Устройство: 807'),('10808', 'Устройство: 808'),('10809', 'Устройство: 809'),('10810', 'Устройство: 810'),('10811', 'Устройство: 811'),('10812', 'Устройство: 812'),('10813', 'Устройство: 813'),('10814', 'Устройство: 814'),('10815', 'Устройство: 815'),('10816', 'Устройство: 816'),('10817', 'Устройство: 817'),('10818', 'Устройство: 818'),('10819', 'Устройство: 819'),('10820', 'Устройство: 820'),('10821', 'Устройство: 821'),('10822', 'Устройство: 822'),('10823', 'Устройство: 823'),('10824', 'Устройство: 824'),('10825', 'Устройство: 825'),('10826', 'Устройство: 826'),('10827', 'Устройство: 827'),('10828', 'Устройство: 828'),('10829', 'Устройство: 829'),('10830', 'Устройство: 830'),('10831', 'Устройство: 831'),('10832', 'Устройство: 832'),('10833', 'Устройство: 833'),('10834', 'Устройство: 834'),('10835', 'Устройство: 835'),('10836', 'Устройство: 836'),('10837', 'Устройство: 837'),('10838', 'Устройство: 838'),('10839', 'Устройство: 839'),('10840', 'Устройство: 840'),('10841', 'Устройство: 841'),('10842', 'Устройство: 842'),('10843', 'Устройство: 843'),('10844', 'Устройство: 844'),('10845', 'Устройство: 845'),('10846', 'Устройство: 846'),('10847', 'Устройство: 847'),('10848', 'Устройство: 848'),('10849', 'Устройство: 849'),('10850', 'Устройство: 850'),('10851', 'Устройство: 851'),('10852', 'Устройство: 852'),('10853', 'Устройство: 853'),('10854', 'Устройство: 854'),('10855', 'Устройство: 855'),('10856', 'Устройство: 856'),('10857', 'Устройство: 857'),('10858', 'Устройство: 858'),('10859', 'Устройство: 859'),('10860', 'Устройство: 860'),('10861', 'Устройство: 861'),('10862', 'Устройство: 862'),('10863', 'Устройство: 863'),('10864', 'Устройство: 864'),('10865', 'Устройство: 865'),('10866', 'Устройство: 866'),('10867', 'Устройство: 867'),('10868', 'Устройство: 868'),('10869', 'Устройство: 869'),('10870', 'Устройство: 870'),('10871', 'Устройство: 871'),('10872', 'Устройство: 872'),('10873', 'Устройство: 873'),('10874', 'Устройство: 874'),('10875', 'Устройство: 875'),('10876', 'Устройство: 876'),('10877', 'Устройство: 877'),('10878', 'Устройство: 878'),('10879', 'Устройство: 879'),('10880', 'Устройство: 880'),('10881', 'Устройство: 881'),('10882', 'Устройство: 882'),('10883', 'Устройство: 883'),('10884', 'Устройство: 884'),('10885', 'Устройство: 885'),('10886', 'Устройство: 886'),('10887', 'Устройство: 887'),('10888', 'Устройство: 888'),('10889', 'Устройство: 889'),('10890', 'Устройство: 890'),('10891', 'Устройство: 891'),('10892', 'Устройство: 892'),('10893', 'Устройство: 893'),('10894', 'Устройство: 894'),('10895', 'Устройство: 895'),('10896', 'Устройство: 896'),('10897', 'Устройство: 897'),('10898', 'Устройство: 898'),('10899', 'Устройство: 899'),('10900', 'Устройство: 900'),('10901', 'Устройство: 901'),('10902', 'Устройство: 902'),('10903', 'Устройство: 903'),('10904', 'Устройство: 904'),('10905', 'Устройство: 905'),('10906', 'Устройство: 906'),('10907', 'Устройство: 907'),('10908', 'Устройство: 908'),('10909', 'Устройство: 909'),('10910', 'Устройство: 910'),('10911', 'Устройство: 911'),('10912', 'Устройство: 912'),('10913', 'Устройство: 913'),('10914', 'Устройство: 914'),('10915', 'Устройство: 915'),('10916', 'Устройство: 916'),('10917', 'Устройство: 917'),('10918', 'Устройство: 918'),('10919', 'Устройство: 919'),('10920', 'Устройство: 920'),('10921', 'Устройство: 921'),('10922', 'Устройство: 922'),('10923', 'Устройство: 923'),('10924', 'Устройство: 924'),('10925', 'Устройство: 925'),('10926', 'Устройство: 926'),('10927', 'Устройство: 927'),('10928', 'Устройство: 928'),('10929', 'Устройство: 929'),('10930', 'Устройство: 930'),('10931', 'Устройство: 931'),('10932', 'Устройство: 932'),('10933', 'Устройство: 933'),('10934', 'Устройство: 934'),('10935', 'Устройство: 935'),('10936', 'Устройство: 936'),('10937', 'Устройство: 937'),('10938', 'Устройство: 938'),('10939', 'Устройство: 939'),('10940', 'Устройство: 940'),('10941', 'Устройство: 941'),('10942', 'Устройство: 942'),('10943', 'Устройство: 943'),('10944', 'Устройство: 944'),('10945', 'Устройство: 945'),('10946', 'Устройство: 946'),('10947', 'Устройство: 947'),('10948', 'Устройство: 948'),('10949', 'Устройство: 949'),('10950', 'Устройство: 950'),('10951', 'Устройство: 951'),('10952', 'Устройство: 952'),('10953', 'Устройство: 953'),('10954', 'Устройство: 954'),('10955', 'Устройство: 955'),('10956', 'Устройство: 956'),('10957', 'Устройство: 957'),('10958', 'Устройство: 958'),('10959', 'Устройство: 959'),('10960', 'Устройство: 960'),('10961', 'Устройство: 961'),('10962', 'Устройство: 962'),('10963', 'Устройство: 963'),('10964', 'Устройство: 964'),('10965', 'Устройство: 965'),('10966', 'Устройство: 966'),('10967', 'Устройство: 967'),('10968', 'Устройство: 968'),('10969', 'Устройство: 969'),('10970', 'Устройство: 970'),('10971', 'Устройство: 971'),('10972', 'Устройство: 972'),('10973', 'Устройство: 973'),('10974', 'Устройство: 974'),('10975', 'Устройство: 975'),('10976', 'Устройство: 976'),('10977', 'Устройство: 977'),('10978', 'Устройство: 978'),('10979', 'Устройство: 979'),('10980', 'Устройство: 980'),('10981', 'Устройство: 981'),('10982', 'Устройство: 982'),('10983', 'Устройство: 983'),('10984', 'Устройство: 984'),('10985', 'Устройство: 985'),('10986', 'Устройство: 986'),('10987', 'Устройство: 987'),('10988', 'Устройство: 988'),('10989', 'Устройство: 989'),('10990', 'Устройство: 990'),('10991', 'Устройство: 991'),('10992', 'Устройство: 992'),('10993', 'Устройство: 993'),('10994', 'Устройство: 994'),('10995', 'Устройство: 995'),('10996', 'Устройство: 996'),('10997', 'Устройство: 997'),('10998', 'Устройство: 998'),('10999', 'Устройство: 999'),('11000', 'Устройство: 1000') { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'RAW' }
Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  uniqueKeys:
   { SequelizeMeta_name_unique:
      { fields: [Array],
        msg: null,
        name: 'SequelizeMeta_name_unique',
        column: 'name',
        customIndex: false } },
  type: 'RAW' }
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  type: 'SHOWINDEXES' }
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING *; { plain: false,
  raw: false,
  logging: [Function: bound consoleCall],
  hooks: true,
  validate: true,
  fields: [ 'name' ],
  defaultFields: [ 'name' ],
  returning: true,
  hasTrigger: undefined,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  clientMinMessages: 'warning',
  standardConformingStrings: true,
  omitNull: false,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: '11.5.0',
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  username: 'postgres',
  password: '6k3vddrb2v',
  database: 'coffee-print-account',
  port: '5432',
  type: 'INSERT',
  instance:
   SequelizeMeta {
     dataValues: { name: '20190705000000-create-device.js' },
     _previousDataValues: { name: undefined },
     _changed: { name: true },
     _modelOptions:
      { timestamps: false,
        validate: {},
        freezeTableName: false,
        underscored: false,
        paranoid: false,
        rejectOnEmpty: false,
        whereCollection: null,
        schema: null,
        schemaDelimiter: '',
        defaultScope: {},
        scopes: {},
        indexes: [],
        name: [Object],
        omitNull: false,
        tableName: 'SequelizeMeta',
        charset: 'utf8',
        collate: 'utf8_unicode_ci',
        sequelize: [Sequelize],
        hooks: {} },
     _options:
      { isNewRecord: true,
        _schema: null,
        _schemaDelimiter: '',
        attributes: undefined,
        include: undefined,
        raw: undefined,
        silent: undefined },
     isNewRecord: true },
  model: SequelizeMeta,
  bind: [ '20190705000000-create-device.js' ] }
== 20190705000000-create-device: migrated (0.166s)

Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  uniqueKeys:
   { SequelizeMeta_name_unique:
      { fields: [Array],
        msg: null,
        name: 'SequelizeMeta_name_unique',
        column: 'name',
        customIndex: false } },
  type: 'RAW' }
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  type: 'SHOWINDEXES' }
Executing (default): SELECT "name" FROM "SequelizeMeta" AS "SequelizeMeta" ORDER BY "SequelizeMeta"."name" ASC; { plain: false,
  raw: false,
  logging: [Function: bound consoleCall],
  order: [ [ 'name', [Literal] ] ],
  hooks: true,
  rejectOnEmpty: false,
  originalAttributes: [ 'name' ],
  attributes: [ 'name' ],
  tableNames: [ 'SequelizeMeta' ],
  type: 'SELECT',
  model: SequelizeMeta }
== 20190706000000-create-statistic: migrating =======
Executing (default): CREATE TABLE IF NOT EXISTS "Statistics" ("id"   SERIAL , "deviceId" INTEGER NOT NULL REFERENCES "Devices" ("id") ON DELETE CASCADE, "cartridgeId" INTEGER NOT NULL REFERENCES "Cartridges" ("id") ON DELETE CASCADE, "quantityPrinted" INTEGER NOT NULL DEFAULT 0, "lastActive" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY ("id")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'RAW' }
Executing (default): CREATE UNIQUE INDEX "statistics_device_id_cartridge_id" ON "Statistics" ("deviceId", "cartridgeId") { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  unique: true,
  fields: [ 'deviceId', 'cartridgeId' ],
  prefix: 'Statistics',
  name: 'statistics_device_id_cartridge_id',
  parser: null,
  supportsSearchPath: false,
  type: 'RAW' }
Executing (default): CREATE TRIGGER "Statistics_update_at"
        BEFORE UPDATE ON "Statistics"
          FOR EACH ROW EXECUTE PROCEDURE update_at_timestamp() { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'RAW' }
Executing (default): CREATE OR REPLACE FUNCTION "Statistics_update"() RETURNS trigger AS $$
        BEGIN
          IF NEW."quantityPrinted" > 0 THEN
            NEW."quantityPrinted" := NEW."quantityPrinted" + OLD."quantityPrinted";
            NEW."lastActive" := CURRENT_TIMESTAMP;
          ELSE
            NEW."quantityPrinted" := OLD."quantityPrinted";
          END IF;
          RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
      CREATE TRIGGER "Statistics_update"
          BEFORE UPDATE ON "Statistics"
            FOR EACH ROW
              WHEN (NEW."quantityPrinted" IS NOT NULL OR NEW."lastActive" IS NOT NULL)
            EXECUTE PROCEDURE "Statistics_update"(); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  type: 'RAW' }
Executing (default): CREATE TABLE IF NOT EXISTS "SequelizeMeta" ("name" VARCHAR(255) NOT NULL UNIQUE , PRIMARY KEY ("name")); { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  uniqueKeys:
   { SequelizeMeta_name_unique:
      { fields: [Array],
        msg: null,
        name: 'SequelizeMeta_name_unique',
        column: 'name',
        customIndex: false } },
  type: 'RAW' }
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'SequelizeMeta' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; { plain: false,
  raw: true,
  logging: [Function: bound consoleCall],
  timestamps: false,
  validate: {},
  freezeTableName: false,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  name: { plural: 'SequelizeMeta', singular: 'SequelizeMetum' },
  omitNull: false,
  tableName: 'SequelizeMeta',
  charset: 'utf8',
  collate: 'utf8_unicode_ci',
  sequelize:
   Sequelize {
     options:
      { dialect: 'postgres',
        dialectModule: null,
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        clientMinMessages: 'warning',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: {},
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: '11.5.0',
        typeValidation: false,
        benchmark: false,
        minifyAliases: false,
        logQueryParameters: false,
        username: 'postgres',
        password: '6k3vddrb2v',
        database: 'coffee-print-account',
        port: '5432' },
     config:
      { database: 'coffee-print-account',
        username: 'postgres',
        password: '6k3vddrb2v',
        host: 'localhost',
        port: '5432',
        pool: {},
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModule: null,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [ConnectionManager],
        QueryGenerator: [PostgresQueryGenerator] },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator: [PostgresQueryGenerator] },
     models: { SequelizeMeta: SequelizeMeta },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [PostgresDialect],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Pool],
        lib: [PG],
        nameOidMap: [Object],
        enumOids: [Object],
        oidParserMap: [Map] },
     importCache: {} },
  hooks: true,
  type: 'SHOWINDEXES' }
Executing (default): INSERT INTO "SequelizeMeta" ("name") VALUES ($1) RETURNING *; { plain: false,
  raw: false,
  logging: [Function: bound consoleCall],
  hooks: true,
  validate: true,
  fields: [ 'name' ],
  defaultFields: [ 'name' ],
  returning: true,
  hasTrigger: undefined,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  clientMinMessages: 'warning',
  standardConformingStrings: true,
  omitNull: false,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: '11.5.0',
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  username: 'postgres',
  password: '6k3vddrb2v',
  database: 'coffee-print-account',
  port: '5432',
  type: 'INSERT',
  instance:
   SequelizeMeta {
     dataValues: { name: '20190706000000-create-statistic.js' },
     _previousDataValues: { name: undefined },
     _changed: { name: true },
     _modelOptions:
      { timestamps: false,
        validate: {},
        freezeTableName: false,
        underscored: false,
        paranoid: false,
        rejectOnEmpty: false,
        whereCollection: null,
        schema: null,
        schemaDelimiter: '',
        defaultScope: {},
        scopes: {},
        indexes: [],
        name: [Object],
        omitNull: false,
        tableName: 'SequelizeMeta',
        charset: 'utf8',
        collate: 'utf8_unicode_ci',
        sequelize: [Sequelize],
        hooks: {} },
     _options:
      { isNewRecord: true,
        _schema: null,
        _schemaDelimiter: '',
        attributes: undefined,
        include: undefined,
        raw: undefined,
        silent: undefined },
     isNewRecord: true },
  model: SequelizeMeta,
  bind: [ '20190706000000-create-statistic.js' ] }
== 20190706000000-create-statistic: migrated (0.140s)

